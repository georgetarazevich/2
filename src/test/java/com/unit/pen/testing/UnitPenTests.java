package com.unit.pen.testing;

import static org.hamcrest.Matchers.equalTo;
import static org.junit.Assert.assertThat;
import static org.testng.Assert.assertFalse;
import static org.testng.Assert.assertTrue;
import static org.mockito.Mockito.*;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import org.testng.annotations.Test;

public class UnitPenTests extends TestBase {

	@Test(dataProvider = "testingInkContainer_TrueValue", enabled = true)
	public void isWorkPen_InkContainer_TrueValue(Pen pen) {
		assertTrue(pen.isWork());
	}

	@Test(dataProvider = "testingInkContainer_FalseValue", enabled = true)
	public void isWorkPen_InkContainer_FalseValue(Pen pen) {
		assertFalse(pen.isWork());
	}

	@Test(enabled = true)
	public void isWorkPen_SizeLetter_TrueValue() {
		int inkContainerValue = 100;
		double sizeLetter = 2.0;
		String color = "RED";
		Pen pen = new Pen(inkContainerValue, sizeLetter, color);
		assertTrue(pen.isWork());
	}

	@Test(dataProvider = "testingSizeLetter_FalseValue", enabled = true)
	public void isWorkPen_SizeLetter_FalseValue(Pen pen) {
		assertFalse(pen.isWork());
	}

	@Test(enabled = true)
	public void checkForRightColorPen() {
		int inkContainerValue = 100;
		double sizeLetter = 2.0;
		String color = "RED";
		Pen pen = new Pen(inkContainerValue, sizeLetter, color);
		assertThat(pen.getColor(), equalTo(color));
	}

	@Test(enabled = true)
	public void checkFor_DoSomethingElse_Working() {
		
		ByteArrayOutputStream baOut = new ByteArrayOutputStream();
		PrintStream out = new PrintStream(baOut);
		System.setOut(out);
		System.setErr(out);
		Pen pen = new Pen(100, 1.0, "RED");
		pen.doSomethingElse();
		String s = new String(baOut.toByteArray());
		assertThat(s.trim(), equalTo("RED"));
		
		}

	@Test(dataProvider = "testingSizeLetter_FalseValue", enabled = true)
	public void isWritekPen_SizeLetter_FalseValue(Pen pen) {
		 
	}
}
